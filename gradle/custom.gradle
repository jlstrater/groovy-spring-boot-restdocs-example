ext {
    snippetsDir = "$buildDir/generated-snippets"
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test

    doLast {
        copy {
            from "$buildDir/asciidoc"
            into "$buildDir/resources/main/public"
            include "**/*.html"
        }
    }
}

build {
    dependsOn asciidoctor
}

codenarc {
    toolVersion = "1.2.1"
}

codenarcMain {
    ignoreFailures false
    configFile file("gradle/codenarc/codenarc.groovy")
}

codenarcTest {
    configFile file("gradle/codenarc/codenarcTest.groovy")
}

task publish(type: GradleBuild) {
    dependsOn asciidoctor
    buildFile = file("gradle/publish.gradle")
    tasks = ["gitPublishPush"]
}

buildScan {
//    termsOfServiceUrl = "https://gradle.com/terms-of-service"
//    termsOfServiceAgree = "yes"
    licenseAgreementUrl = "https://gradle.com/terms-of-service"
    licenseAgree = "yes"
    publishAlways()
}

if (JavaVersion.current().isJava9Compatible()) {
    def jaxbJvmArgs = ['--add-modules', 'java.xml.bind']
    tasks.withType(GroovyCompile) {
        groovyOptions.fork = true
        groovyOptions.forkOptions.jvmArgs.addAll(jaxbJvmArgs)
    }
    tasks.withType(Test) {
        jvmArgs jaxbJvmArgs
    }
}
